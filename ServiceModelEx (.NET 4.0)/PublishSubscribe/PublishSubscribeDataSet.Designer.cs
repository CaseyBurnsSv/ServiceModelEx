//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace ServiceModelEx {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator","2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("PublishSubscribeDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class PublishSubscribeDataSet : System.Data.DataSet {
        
        private PersistentSubscribersDataTable tablePersistentSubscribers;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PublishSubscribeDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected PublishSubscribeDataSet(System.Runtime.Serialization.SerializationInfo info,System.Runtime.Serialization.StreamingContext context) : 
                base(info,context,false) {
            if((this.IsBinarySerialized(info,context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema",typeof(string))));
            if((this.DetermineSchemaSerializationMode(info,context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if((ds.Tables["PersistentSubscribers"] != null)) {
                    base.Tables.Add(new PersistentSubscribersDataTable(ds.Tables["PersistentSubscribers"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds,false,System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info,context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PersistentSubscribersDataTable PersistentSubscribers {
            get {
                return this.tablePersistentSubscribers;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            PublishSubscribeDataSet cln = ((PublishSubscribeDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if((ds.Tables["PersistentSubscribers"] != null)) {
                    base.Tables.Add(new PersistentSubscribersDataTable(ds.Tables["PersistentSubscribers"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds,false,System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream,null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream),null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablePersistentSubscribers = ((PersistentSubscribersDataTable)(base.Tables["PersistentSubscribers"]));
            if((initTable == true)) {
                if((this.tablePersistentSubscribers != null)) {
                    this.tablePersistentSubscribers.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "PublishSubscribeDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/PublishSubscribeDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablePersistentSubscribers = new PersistentSubscribersDataTable();
            base.Tables.Add(this.tablePersistentSubscribers);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePersistentSubscribers() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender,System.ComponentModel.CollectionChangeEventArgs e) {
            if((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            PublishSubscribeDataSet ds = new PublishSubscribeDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void PersistentSubscribersRowChangeEventHandler(object sender,PersistentSubscribersRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator","2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PersistentSubscribersDataTable : System.Data.DataTable,System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnAddress;
            
            private System.Data.DataColumn columnOperation;
            
            private System.Data.DataColumn columnContract;
            
            private System.Data.DataColumn columnID;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PersistentSubscribersDataTable() {
                this.TableName = "PersistentSubscribers";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PersistentSubscribersDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PersistentSubscribersDataTable(System.Runtime.Serialization.SerializationInfo info,System.Runtime.Serialization.StreamingContext context) : 
                    base(info,context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OperationColumn {
                get {
                    return this.columnOperation;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ContractColumn {
                get {
                    return this.columnContract;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PersistentSubscribersRow this[int index] {
                get {
                    return ((PersistentSubscribersRow)(this.Rows[index]));
                }
            }
            
            public event PersistentSubscribersRowChangeEventHandler PersistentSubscribersRowChanging;
            
            public event PersistentSubscribersRowChangeEventHandler PersistentSubscribersRowChanged;
            
            public event PersistentSubscribersRowChangeEventHandler PersistentSubscribersRowDeleting;
            
            public event PersistentSubscribersRowChangeEventHandler PersistentSubscribersRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPersistentSubscribersRow(PersistentSubscribersRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PersistentSubscribersRow AddPersistentSubscribersRow(string Address,string Operation,string Contract) {
                PersistentSubscribersRow rowPersistentSubscribersRow = ((PersistentSubscribersRow)(this.NewRow()));
                rowPersistentSubscribersRow.ItemArray = new object[] {
                        Address,
                        Operation,
                        Contract,
                        null};
                this.Rows.Add(rowPersistentSubscribersRow);
                return rowPersistentSubscribersRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PersistentSubscribersRow FindByID(int ID) {
                return ((PersistentSubscribersRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PersistentSubscribersDataTable cln = ((PersistentSubscribersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PersistentSubscribersDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAddress = base.Columns["Address"];
                this.columnOperation = base.Columns["Operation"];
                this.columnContract = base.Columns["Contract"];
                this.columnID = base.Columns["ID"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAddress = new System.Data.DataColumn("Address",typeof(string),null,System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnOperation = new System.Data.DataColumn("Operation",typeof(string),null,System.Data.MappingType.Element);
                base.Columns.Add(this.columnOperation);
                this.columnContract = new System.Data.DataColumn("Contract",typeof(string),null,System.Data.MappingType.Element);
                base.Columns.Add(this.columnContract);
                this.columnID = new System.Data.DataColumn("ID",typeof(int),null,System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1",new System.Data.DataColumn[] {
                                this.columnID},true));
                this.columnAddress.AllowDBNull = false;
                this.columnAddress.MaxLength = 500;
                this.columnOperation.AllowDBNull = false;
                this.columnOperation.MaxLength = 500;
                this.columnContract.AllowDBNull = false;
                this.columnContract.MaxLength = 500;
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PersistentSubscribersRow NewPersistentSubscribersRow() {
                return ((PersistentSubscribersRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PersistentSubscribersRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PersistentSubscribersRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if((this.PersistentSubscribersRowChanged != null)) {
                    this.PersistentSubscribersRowChanged(this,new PersistentSubscribersRowChangeEvent(((PersistentSubscribersRow)(e.Row)),e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if((this.PersistentSubscribersRowChanging != null)) {
                    this.PersistentSubscribersRowChanging(this,new PersistentSubscribersRowChangeEvent(((PersistentSubscribersRow)(e.Row)),e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if((this.PersistentSubscribersRowDeleted != null)) {
                    this.PersistentSubscribersRowDeleted(this,new PersistentSubscribersRowChangeEvent(((PersistentSubscribersRow)(e.Row)),e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if((this.PersistentSubscribersRowDeleting != null)) {
                    this.PersistentSubscribersRowDeleting(this,new PersistentSubscribersRowChangeEvent(((PersistentSubscribersRow)(e.Row)),e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePersistentSubscribersRow(PersistentSubscribersRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                PublishSubscribeDataSet ds = new PublishSubscribeDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PersistentSubscribersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator","2.0.0.0")]
        public partial class PersistentSubscribersRow : System.Data.DataRow {
            
            private PersistentSubscribersDataTable tablePersistentSubscribers;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PersistentSubscribersRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePersistentSubscribers = ((PersistentSubscribersDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    return ((string)(this[this.tablePersistentSubscribers.AddressColumn]));
                }
                set {
                    this[this.tablePersistentSubscribers.AddressColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Operation {
                get {
                    return ((string)(this[this.tablePersistentSubscribers.OperationColumn]));
                }
                set {
                    this[this.tablePersistentSubscribers.OperationColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Contract {
                get {
                    return ((string)(this[this.tablePersistentSubscribers.ContractColumn]));
                }
                set {
                    this[this.tablePersistentSubscribers.ContractColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tablePersistentSubscribers.IDColumn]));
                }
                set {
                    this[this.tablePersistentSubscribers.IDColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator","2.0.0.0")]
        public class PersistentSubscribersRowChangeEvent : System.EventArgs {
            
            private PersistentSubscribersRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PersistentSubscribersRowChangeEvent(PersistentSubscribersRow row,System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PersistentSubscribersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace ServiceModelEx.PublishSubscribeDataSetTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator","2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner,Microsoft.VSDesigner" +
        ",Version=8.0.0.0,Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PersistentSubscribersTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PersistentSubscribersTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PersistentSubscribers";
            tableMapping.ColumnMappings.Add("Address","Address");
            tableMapping.ColumnMappings.Add("Operation","Operation");
            tableMapping.ColumnMappings.Add("Contract","Contract");
            tableMapping.ColumnMappings.Add("ID","ID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[PersistentSubscribers] WHERE (([Address] = @Original_Address) " +
                "AND ([Operation] = @Original_Operation) AND ([Contract] = @Original_Contract) AN" +
                "D ([ID] = @Original_ID))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Address",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"Address",System.Data.DataRowVersion.Original,false,null,"","",""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Operation",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"Operation",System.Data.DataRowVersion.Original,false,null,"","",""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Contract",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"Contract",System.Data.DataRowVersion.Original,false,null,"","",""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"ID",System.Data.DataRowVersion.Original,false,null,"","",""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[PersistentSubscribers] ([Address],[Operation],[Contract]) VA" +
                "LUES (@Address,@Operation,@Contract);\r\nSELECT Address,Operation,Contract,ID" +
                " FROM PersistentSubscribers WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Address",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"Address",System.Data.DataRowVersion.Current,false,null,"","",""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Operation",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"Operation",System.Data.DataRowVersion.Current,false,null,"","",""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Contract",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"Contract",System.Data.DataRowVersion.Current,false,null,"","",""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[PersistentSubscribers] SET [Address] = @Address,[Operation] = @Operation,[Contract] = @Contract WHERE (([Address] = @Original_Address) AND ([Operation] = @Original_Operation) AND ([Contract] = @Original_Contract) AND ([ID] = @Original_ID));
SELECT Address,Operation,Contract,ID FROM PersistentSubscribers WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Address",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"Address",System.Data.DataRowVersion.Current,false,null,"","",""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Operation",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"Operation",System.Data.DataRowVersion.Current,false,null,"","",""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Contract",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"Contract",System.Data.DataRowVersion.Current,false,null,"","",""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Address",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"Address",System.Data.DataRowVersion.Original,false,null,"","",""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Operation",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"Operation",System.Data.DataRowVersion.Original,false,null,"","",""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Contract",System.Data.SqlDbType.VarChar,0,System.Data.ParameterDirection.Input,0,0,"Contract",System.Data.DataRowVersion.Original,false,null,"","",""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"ID",System.Data.DataRowVersion.Original,false,null,"","",""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID",System.Data.SqlDbType.Int,4,System.Data.ParameterDirection.Input,0,0,"ID",System.Data.DataRowVersion.Current,false,null,"","",""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ServiceModelEx.Properties.Settings.Default.PublishSubscribeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[6];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Address,Operation,Contract,ID FROM dbo.PersistentSubscribers";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT Address,Operation,Contract,ID FROM dbo.PersistentSubscribers";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT Address,Operation,Contract,ID FROM dbo.PersistentSubscribers WHERE Addr" +
                "ess=@address AND  Contract = @contract AND Operation = @operation";
            this._commandCollection[2].CommandType = System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@address",System.Data.SqlDbType.VarChar,500,System.Data.ParameterDirection.Input,0,0,"Address",System.Data.DataRowVersion.Current,false,null,"","",""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@contract",System.Data.SqlDbType.VarChar,500,System.Data.ParameterDirection.Input,0,0,"Contract",System.Data.DataRowVersion.Current,false,null,"","",""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@operation",System.Data.SqlDbType.VarChar,500,System.Data.ParameterDirection.Input,0,0,"Operation",System.Data.DataRowVersion.Current,false,null,"","",""));
            this._commandCollection[3] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "SELECT Address,Operation,Contract,ID FROM dbo.PersistentSubscribers WHERE Addr" +
                "ess=@address";
            this._commandCollection[3].CommandType = System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@address",System.Data.SqlDbType.VarChar,500,System.Data.ParameterDirection.Input,0,0,"Address",System.Data.DataRowVersion.Current,false,null,"","",""));
            this._commandCollection[4] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "SELECT Address,Operation,Contract,ID FROM dbo.PersistentSubscribers WHERE Cont" +
                "ract = @contract ";
            this._commandCollection[4].CommandType = System.Data.CommandType.Text;
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@contract",System.Data.SqlDbType.VarChar,500,System.Data.ParameterDirection.Input,0,0,"Contract",System.Data.DataRowVersion.Current,false,null,"","",""));
            this._commandCollection[5] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = "SELECT Address,Operation,Contract,ID FROM dbo.PersistentSubscribers WHERE Cont" +
                "ract = @contract AND Operation = @operation";
            this._commandCollection[5].CommandType = System.Data.CommandType.Text;
            this._commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@contract",System.Data.SqlDbType.VarChar,500,System.Data.ParameterDirection.Input,0,0,"Contract",System.Data.DataRowVersion.Current,false,null,"","",""));
            this._commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@operation",System.Data.SqlDbType.VarChar,500,System.Data.ParameterDirection.Input,0,0,"Operation",System.Data.DataRowVersion.Current,false,null,"","",""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill,true)]
        public virtual int Fill(PublishSubscribeDataSet.PersistentSubscribersDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select,true)]
        public virtual PublishSubscribeDataSet.PersistentSubscribersDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PublishSubscribeDataSet.PersistentSubscribersDataTable dataTable = new PublishSubscribeDataSet.PersistentSubscribersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select,false)]
        public virtual PublishSubscribeDataSet.PersistentSubscribersDataTable GetAllSubscribers() {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            PublishSubscribeDataSet.PersistentSubscribersDataTable dataTable = new PublishSubscribeDataSet.PersistentSubscribersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select,false)]
        public virtual PublishSubscribeDataSet.PersistentSubscribersDataTable GetSubscribersByAddressContractOperation(string address,string contract,string operation) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if((address == null)) {
                throw new System.ArgumentNullException("address");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(address));
            }
            if((contract == null)) {
                throw new System.ArgumentNullException("contract");
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(contract));
            }
            if((operation == null)) {
                throw new System.ArgumentNullException("operation");
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(operation));
            }
            PublishSubscribeDataSet.PersistentSubscribersDataTable dataTable = new PublishSubscribeDataSet.PersistentSubscribersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select,false)]
        public virtual PublishSubscribeDataSet.PersistentSubscribersDataTable GetSubscribersFromAddress(string address) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if((address == null)) {
                throw new System.ArgumentNullException("address");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(address));
            }
            PublishSubscribeDataSet.PersistentSubscribersDataTable dataTable = new PublishSubscribeDataSet.PersistentSubscribersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select,false)]
        public virtual PublishSubscribeDataSet.PersistentSubscribersDataTable GetSubscribersToContract(string contract) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if((contract == null)) {
                throw new System.ArgumentNullException("contract");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(contract));
            }
            PublishSubscribeDataSet.PersistentSubscribersDataTable dataTable = new PublishSubscribeDataSet.PersistentSubscribersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select,false)]
        public virtual PublishSubscribeDataSet.PersistentSubscribersDataTable GetSubscribersToContractOperation(string contract,string operation) {
            this.Adapter.SelectCommand = this.CommandCollection[5];
            if((contract == null)) {
                throw new System.ArgumentNullException("contract");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(contract));
            }
            if((operation == null)) {
                throw new System.ArgumentNullException("operation");
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(operation));
            }
            PublishSubscribeDataSet.PersistentSubscribersDataTable dataTable = new PublishSubscribeDataSet.PersistentSubscribersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PublishSubscribeDataSet.PersistentSubscribersDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PublishSubscribeDataSet dataSet) {
            return this.Adapter.Update(dataSet,"PersistentSubscribers");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete,true)]
        public virtual int Delete(string Original_Address,string Original_Operation,string Original_Contract,int Original_ID) {
            if((Original_Address == null)) {
                throw new System.ArgumentNullException("Original_Address");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_Address));
            }
            if((Original_Operation == null)) {
                throw new System.ArgumentNullException("Original_Operation");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Operation));
            }
            if((Original_Contract == null)) {
                throw new System.ArgumentNullException("Original_Contract");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Contract));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if(((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert,true)]
        public virtual int Insert(string Address,string Operation,string Contract) {
            if((Address == null)) {
                throw new System.ArgumentNullException("Address");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Address));
            }
            if((Operation == null)) {
                throw new System.ArgumentNullException("Operation");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Operation));
            }
            if((Contract == null)) {
                throw new System.ArgumentNullException("Contract");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Contract));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if(((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update,true)]
        public virtual int Update(string Address,string Operation,string Contract,string Original_Address,string Original_Operation,string Original_Contract,int Original_ID,int ID) {
            if((Address == null)) {
                throw new System.ArgumentNullException("Address");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Address));
            }
            if((Operation == null)) {
                throw new System.ArgumentNullException("Operation");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Operation));
            }
            if((Contract == null)) {
                throw new System.ArgumentNullException("Contract");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Contract));
            }
            if((Original_Address == null)) {
                throw new System.ArgumentNullException("Original_Address");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_Address));
            }
            if((Original_Operation == null)) {
                throw new System.ArgumentNullException("Original_Operation");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_Operation));
            }
            if((Original_Contract == null)) {
                throw new System.ArgumentNullException("Original_Contract");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_Contract));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_ID));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if(((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
}

#pragma warning restore 1591